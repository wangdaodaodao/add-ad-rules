import{connect}from'cloudflare:sockets';const a='f47ac10b-58cc-4372-a567-0e02b2c3d479',b=String.fromCharCode(80,114,111,120,121,73,80,46,99,109,108,105,117,115,115,115,115,46,110,101,116),c='443',d=atob('aW52YWxpZCBkYXRh'),e=atob('aW52YWxpZCB1c2Vy'),f=atob('Y29tbWFuZCBpcyBub3Qgc3VwcG9ydGVk'),g=atob('VURQIHByb3h5IG9ubHkgZW5hYmxlIGZvciBETlMgd2hpY2ggaXMgcG9ydCA1Mw=='),h=atob('aW52YWxpZCBhZGRyZXNzVHlwZQ=='),i=atob('YWRkcmVzc1ZhbHVlIGlzIGVtcHR5'),j=atob('d2ViU29ja2V0LmVhZHlTdGF0ZSBpcyBub3Qgb3Blbg=='),k=atob('U3RyaW5naWZpZWQgaWRlbnRpZmllciBpcyBpbnZhbGlk'),l=1,m=2,n=3;export default{async fetch(o,p,q){try{const r='good',s=new URL(o.url);if(o.headers.get('Upgrade')==='websocket')return await t(o);else if(o.method==='GET'){if(s.pathname==='/')return new Response("Good job",{status:200,headers:{'Content-Type':'text/html; charset=utf-8'}});if(s.pathname===`/${r}`)return await u(o,p,a)}return new Response('Not Found',{status:404})}catch(v){return new Response(v.toString(),{status:500})}}};async function u(o,p,w){const s=new URL(o.url),x=[],y=s.hostname,z=(p&&p.EXTERNAL_EDIT_URL)||'http://good.misu7.filegear-sg.me/wddout/edit';try{const A=await fetch(z,{headers:{'User-Agent':'Mozilla/5.0 (compatible; Cloudflare Worker)'}});if(A.ok){const B=await A.text(),C=B.match(/<textarea[^>]*>([\s\S]*?)<\/textarea>/);if(C&&C[1]){const D=C[1].trim(),E=D.split('\n').map(F=>F.trim()).filter(F=>F&&!F.startsWith('--')),G=[];for(const F of E){try{if(F.includes('#')){const[H,I]=F.split('#');if(H.includes(':')){const[J,K]=H.split(':');G.push({ip:J.trim(),port:parseInt(K),isp:I.trim()})}else G.push({ip:H.trim(),port:443,isp:I.trim()})}}catch(L){continue}}const M=G.filter(N=>N&&N.ip&&N.ip!=='127.0.0.1'&&!isNaN(N.port)&&(N.isp.startsWith('HK')||N.isp.startsWith('US')||N.isp.startsWith('WDD')||N.isp.startsWith('SG'))&&!N.isp.includes('NAT'));if(M.length>0)x.push(...O(M,w,y))}}}catch(P){console.error('Error reading from external service:',P)}const Q=btoa(x.join('\n'));return new Response(Q,{headers:{'Content-Type':'text/plain; charset=utf-8','Cache-Control':'no-store, no-cache, must-revalidate, max-age=0'}})}function O(list,uuid,workerDomain){const links=[],wsPath=encodeURIComponent('/wdd'),proto=String.fromCharCode(118,108,101,115,115);list.forEach(item=>{const safeIP=item.ip.includes(':')?`[${item.ip}]`:item.ip,wsParams=new URLSearchParams({encryption:'none',security:'tls',sni:workerDomain,fp:'randomized',type:'ws',host:workerDomain,path:wsPath});links.push(`${proto}://${uuid}@${safeIP}:443?${wsParams.toString()}#${encodeURIComponent(item.isp+"-SNIP")}`)});return links}async function t(request){const wsPair=new WebSocketPair(),[clientSock,serverSock]=Object.values(wsPair);serverSock.accept();let remoteConnWrapper={socket:null},isDnsQuery=false,earlyData=request.headers.get('sec-websocket-protocol')||'',readable=R(serverSock,earlyData);readable.pipeTo(new WritableStream({async write(chunk){if(isDnsQuery)return await S(chunk,serverSock,null);if(remoteConnWrapper.socket){const writer=remoteConnWrapper.socket.writable.getWriter();await writer.write(chunk);writer.releaseLock();return}const{hasError,message,addressType,port,hostname,rawIndex,version,isUDP}=T(chunk,a);if(hasError)throw new Error(message);if(isUDP){if(port===53)isDnsQuery=true;else throw new Error(g)}const respHeader=new Uint8Array([version[0],0]),rawData=chunk.slice(rawIndex);if(isDnsQuery)return S(rawData,serverSock,respHeader);await U(addressType,hostname,port,rawData,serverSock,respHeader,remoteConnWrapper)}})).catch(err=>{console.log('WS Stream Error:',err)});return new Response(null,{status:101,webSocket:clientSock})}async function U(addrType,host,portNum,rawData,ws,respHeader,remoteConnWrapper){async function connectAndSend(address,port){const remoteSock=connect({hostname:address,port:port}),writer=remoteSock.writable.getWriter();await writer.write(rawData);writer.releaseLock();return remoteSock}async function retryConnection(){const newSocket=await connectAndSend(b||host,parseInt(c,10)||portNum);remoteConnWrapper.socket=newSocket;newSocket.closed.catch(()=>{}).finally(()=>V(ws));W(newSocket,ws,respHeader,null)}try{const initialSocket=await connectAndSend(host,portNum);remoteConnWrapper.socket=initialSocket;W(initialSocket,ws,respHeader,retryConnection)}catch(err){console.log('Initial connection failed, trying fallback:',err);retryConnection()}}function T(chunk,token){if(chunk.byteLength<24)return{hasError:true,message:d};const version=new Uint8Array(chunk.slice(0,1));if(X(new Uint8Array(chunk.slice(1,17)))!==token)return{hasError:true,message:e};const optLen=new Uint8Array(chunk.slice(17,18))[0],cmd=new Uint8Array(chunk.slice(18+optLen,19+optLen))[0];let isUDP=false;if(cmd===1){}else if(cmd===2){isUDP=true}else{return{hasError:true,message:f}}const portIdx=19+optLen,port=new DataView(chunk.slice(portIdx,portIdx+2)).getUint16(0);let addrIdx=portIdx+2,addrLen=0,addrValIdx=addrIdx+1,hostname='';const addressType=new Uint8Array(chunk.slice(addrIdx,addrValIdx))[0];switch(addressType){case l:addrLen=4;hostname=new Uint8Array(chunk.slice(addrValIdx,addrValIdx+addrLen)).join('.');break;case m:addrLen=new Uint8Array(chunk.slice(addrValIdx,addrValIdx+1))[0];addrValIdx+=1;hostname=new TextDecoder().decode(chunk.slice(addrValIdx,addrValIdx+addrLen));break;case n:addrLen=16;const ipv6=[],ipv6View=new DataView(chunk.slice(addrValIdx,addrValIdx+addrLen));for(let i=0;i<8;i++)ipv6.push(ipv6View.getUint16(i*2).toString(16));hostname=ipv6.join(':');break;default:return{hasError:true,message:`${h}: ${addressType}`}}if(!hostname)return{hasError:true,message:`${i}: ${addressType}`};return{hasError:false,addressType,port,hostname,isUDP,rawIndex:addrValIdx+addrLen,version}}function R(socket,earlyDataHeader){let cancelled=false;return new ReadableStream({start(controller){socket.addEventListener('message',event=>{if(!cancelled)controller.enqueue(event.data)});socket.addEventListener('close',()=>{if(!cancelled){V(socket);controller.close()}});socket.addEventListener('error',err=>controller.error(err));const{earlyData,error}=Y(earlyDataHeader);if(error)controller.error(error);else if(earlyData)controller.enqueue(earlyData)},cancel(){cancelled=true;V(socket)}})}async function W(remoteSocket,webSocket,headerData,retryFunc){let header=headerData,hasData=false;await remoteSocket.readable.pipeTo(new WritableStream({async write(chunk,controller){hasData=true;if(webSocket.readyState!==1)controller.error(j);if(header){webSocket.send(await new Blob([header,chunk]).arrayBuffer());header=null}else{webSocket.send(chunk)}},abort(reason){console.error("Readable aborted:",reason)}})).catch(error=>{console.error("Stream connection error:",error);V(webSocket)});if(!hasData&&retryFunc)retryFunc()}async function S(udpChunk,webSocket,respHeader){try{const tcpSocket=connect({hostname:'8.8.4.4',port:53});let udpHeader=respHeader;const writer=tcpSocket.writable.getWriter();await writer.write(udpChunk);writer.releaseLock();await tcpSocket.readable.pipeTo(new WritableStream({async write(chunk){if(webSocket.readyState===1){if(udpHeader){webSocket.send(await new Blob([udpHeader,chunk]).arrayBuffer());udpHeader=null}else{webSocket.send(chunk)}}}}))}catch(error){console.error(`DNS forward error: ${error.message}`)}}function Y(b64Str){if(!b64Str)return{error:null};try{b64Str=b64Str.replace(/-/g,'+').replace(/_/g,'/');return{earlyData:Uint8Array.from(atob(b64Str),c=>c.charCodeAt(0)).buffer,error:null}}catch(error){return{error}}}function Z(uuid){return/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(uuid)}function V(socket){try{if(socket.readyState===1||socket.readyState===2)socket.close()}catch(error){}}const hexTable=Array.from({length:256},(v,i)=>(i+256).toString(16).slice(1));function X(arr,offset=0){const id=(hexTable[arr[offset]]+hexTable[arr[offset+1]]+hexTable[arr[offset+2]]+hexTable[arr[offset+3]]+"-"+hexTable[arr[offset+4]]+hexTable[arr[offset+5]]+"-"+hexTable[arr[offset+6]]+hexTable[arr[offset+7]]+"-"+hexTable[arr[offset+8]]+hexTable[arr[offset+9]]+"-"+hexTable[arr[offset+10]]+hexTable[arr[offset+11]]+hexTable[arr[offset+12]]+hexTable[arr[offset+13]]+hexTable[arr[offset+14]]+hexTable[arr[offset+15]]).toLowerCase();if(!Z(id))throw new TypeError(k);return id}function disguise(){const disguiseVar='proxy disguised as normal worker';const calc=disguiseVar.split('').reverse().join('');return calc;}
